---- Input ----
a := x and (0x09 xor z or 0xAF);
---- Debugging ----
currentStateN a
currentStateI  
currentStateN :
currentStateA =
currentStateN  
currentStateN x
currentStateI  
currentStateN a
currentStateI n
currentStateI d
currentStateI  
currentStateN (
currentStateN 0
currentStateZ x
currentStateX 0
currentStateH 9
currentStateH  
currentStateN x
currentStateI o
currentStateI r
currentStateI  
currentStateN z
currentStateI  
currentStateN o
currentStateI r
currentStateI  
currentStateN 0
currentStateZ x
currentStateX A
currentStateH F
currentStateH )
currentStateN ;
---- Token table ----
            ID  a
    ASSIGNMENT  :=
            ID  x
       KEYWORD  and
         BRACE  (
           HEX  0x09
       KEYWORD  xor
            ID  z
       KEYWORD  or
           HEX  0xAF
         BRACE  )
 END_STATEMENT  ;

Stack - [a := a and ( a xor a or a ) ;] Memory - []
Action - Transfer

Stack - [:= a and ( a xor a or a ) ;] Memory - [a]
Compare... a = :=
Action - Transfer

Stack - [a and ( a xor a or a ) ;] Memory - [a :=]
Compare... := < a
Action - Transfer

Stack - [and ( a xor a or a ) ;] Memory - [a := a]
Compare... a > and
Action - Convolution 9

Stack - [and ( a xor a or a ) ;] Memory - [a := E]
Compare... := < and
Action - Transfer

Stack - [( a xor a or a ) ;] Memory - [a := E and]
Compare... and < (
Action - Transfer

Stack - [a xor a or a ) ;] Memory - [a := E and (]
Compare... ( < a
Action - Transfer

Stack - [xor a or a ) ;] Memory - [a := E and ( a]
Compare... a > xor
Action - Convolution 9

Stack - [xor a or a ) ;] Memory - [a := E and ( E]
Compare... ( < xor
Action - Transfer

Stack - [a or a ) ;] Memory - [a := E and ( E xor]
Compare... xor < a
Action - Transfer

Stack - [or a ) ;] Memory - [a := E and ( E xor a]
Compare... a > or
Action - Convolution 9

Stack - [or a ) ;] Memory - [a := E and ( E xor E]
Compare... xor > or
Action - Convolution 3

Stack - [or a ) ;] Memory - [a := E and ( E]
Compare... ( < or
Action - Transfer

Stack - [a ) ;] Memory - [a := E and ( E or]
Compare... or < a
Action - Transfer

Stack - [) ;] Memory - [a := E and ( E or a]
Compare... a > )
Action - Convolution 9

Stack - [) ;] Memory - [a := E and ( E or E]
Compare... or > )
Action - Convolution 2

Stack - [) ;] Memory - [a := E and ( E]
Compare... ( = )
Action - Transfer

Stack - [;] Memory - [a := E and ( E )]
Compare... ) > ;
Action - Convolution 7

Stack - [;] Memory - [a := E and E]
Compare... and > ;
Action - Convolution 5

Stack - [;] Memory - [a := E]
Compare... := = ;
Action - Transfer

Stack - [] Memory - [a := E ;]
Action - Convolution 1

Stack - [] Memory - [E]
Триады:

1: xor (0x09, z)
2: or (^1, 0xAF)
3: and (x, ^2)
4: := (a, ^3)

Код:

MOV AX, 0x09
MOV BX, z
XOR AX, BX
PUSH AX
---------------
POP AX
MOV BX, 0xAF
OR AX, BX
PUSH AX
---------------
POP BX
MOV AX, x
AND AX, BX
PUSH AX
---------------
POP AX
MOV a, AX
---------------

Сворачиваем триады:

Первый этап:

1: xor (0x09, z)
2: or (^1, 0xAF)
3: and (x, ^2)
4: := (a, ^3)

Второй этап:

1: xor (0x09, z)
2: or (^1, 0xAF)
3: and (x, ^2)
4: := (a, ^3)

Оптимизированный код:

MOV AX, 0x09
MOV BX, z
XOR AX, BX

MOV BX, 0xAF
OR AX, BX

MOVE BX, AX
MOV AX, x
AND AX, BX

MOV a, AX

